{"ast":null,"code":"var _jsxFileName = \"/home/gideonpinto/pl-cni_challenge_react/client/src/Containerize/Main/index.tsx\";\nimport React from \"react\";\n\nconst Main = () => {\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: \"main-template main-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"page-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, \"Containerize with ChRIS and Docker\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"Let's get started !\"), /*#__PURE__*/React.createElement(\"img\", {\n    className: \"main-image\",\n    src: \"images/CHRiS_logo.png\",\n    alt: \"main image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"Classification Output Requirements\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, \"The results from your model should be output into a text file in the following format:\", \" \"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \" \", \"classNameification labels should be 0 = Controls, 1 = Patient;\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, \" \", \"Prediction probability or score for each subject is required;\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, \" \", \"The output file should contain comma-separated values and named \\\"classNameification.csv\\\";\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \" \", \"Each row must contain the subject ID, the classNameification label, and the prediction probability (one row per subject)\")), \"eg. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"sub-066,1,0.7269782399142388 sub-090,0,0.8111361229380137 . . . sub-111,0,0.60761617828937793 sub-115,1,0.836589863164504\"), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Installation Requirements and Quick Setup\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, \" \", \"Install \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Python\"), \" (3.5+) and \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 46\n    }\n  }, \"pip\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \" \", \"Create a\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"GitHub\"), \" account\"), \", and install it on your machine;\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \" \", \"Create a\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://hub.docker.com/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"Docker Hub\"), \" account\"), \";\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \" \", \"Install the latest \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 32\n    }\n  }, \"Docker\"), \" (17.04.0+) if you want to test your plugin's Docker image and containers on your machine. To install on Ubuntu 18.04:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"apt-get remove docker docker-engine docker.io \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 61\n    }\n  }), \"apt install docker.io \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 37\n    }\n  })), \"Otherwise, visit\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://docs.docker.com/install/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"https://docs.docker.com/install/\"), \" \", \"for installation directions.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \" \", \"Fork our wrapper template\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/aichung/pl-cnichallenge_stub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"pl-cnichallenge_stub\")), \" \", \"repository to your GitHub.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \" \", \"Log onto your Docker Hub account and create a new repository with automated build:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"In 'Account Settings' -> 'Linked Accounts', connect your GitHub account to your DockerHub account.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"In your DockerHub home, click the \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 49\n    }\n  }, \"Create Repository+\"), \" \", \"button. The website page will walk you through setting up the automated build. When prompted for the GitHub repository that you\\u2019d like to use for the automated build select the\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"pl-cni_challenge\"), \"repository that you just forked. Name the Docker repository\", \" \", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \" cnichallenge_DockerRepo\"), \"and make it Public.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"***It is extremely important that you tag your automatically built docker image with an appropriate version number based on your GitHub tags***.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }), \"&nbsp&nbsp&nbsp&nbsp Create a new build rule by clicking the\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, \"BUILD RULES+\"), \" button. A good rule is **Source type:** \\\"Tag\\\", **Source:** \\\"/^[0-9.]+$/\\\" and **Docker Tag:** \\\"version-sourceref\\\".\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \" \", \"Click \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 21\n    }\n  }, \"Create & Build\"), \" button to finish the setup and trigger the automated build.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, \"After this build has completed, the \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 49\n    }\n  }, \"cnichallenge_stub\"), \" bare bones example is now available as a Docker image to be pulled from your Docker Hub. The link to it will be\", /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"your_Docker_account name/cnichallenge_DockerRepo\"), \".Use this to\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"evaluate\"), \"your model on the test set.\")), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, \"Plugin Wrapper\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"We provide a wrapper for your code in a GitHub repo,\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/aichung/pl-cnichallenge_stub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"pl-cnichallenge_stub\"), \",that containerizes your trained model. pl-cnichallenge_stub is an app containing a bare bones example which you can edit to include your code/package. Although the wrapper is coded in Python, programs in other languages can be included.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }), \"See the pl-cnichallenge_stub README for details on how to execute and populate the bare bones example to containerize your model that is compatible for use on our evaluation portal.\")));\n};\n\nexport default Main;","map":{"version":3,"sources":["/home/gideonpinto/pl-cni_challenge_react/client/src/Containerize/Main/index.tsx"],"names":["React","Main"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Connectivity from \"../../assets/Connectivity.jpg\";\n\nconst Main: React.FC = () => {\n  return (\n    <main className=\"main-template main-grid\">\n      <h1 className=\"page-title\">Containerize with ChRIS and Docker</h1>\n      <p className=\"sub-title\">Let's get started !</p>\n      <img\n        className=\"main-image\"\n        src=\"images/CHRiS_logo.png\"\n        alt=\"main image\"\n      />\n\n      <div className=\"main-text\">\n        <h2 className=\"section-title\">Classification Output Requirements</h2>\n        <span>\n          The results from your model should be output into a text file in the\n          following format:{\" \"}\n        </span>\n        <ul>\n          <li>\n            {\" \"}\n            classNameification labels should be 0 = Controls, 1 = Patient;\n          </li>\n          <li>\n            {\" \"}\n            Prediction probability or score for each subject is required;\n          </li>\n          <li>\n            {\" \"}\n            The output file should contain comma-separated values and named\n            \"classNameification.csv\";\n          </li>\n          <li>\n            {\" \"}\n            Each row must contain the subject ID, the classNameification label,\n            and the prediction probability (one row per subject)\n          </li>\n        </ul>\n        eg. <br />\n        <pre>\n          sub-066,1,0.7269782399142388 sub-090,0,0.8111361229380137 . . .\n          sub-111,0,0.60761617828937793 sub-115,1,0.836589863164504\n        </pre>\n        <h2 className=\"section-title\">\n          Installation Requirements and Quick Setup\n        </h2>\n        <ol>\n          <li>\n            {\" \"}\n            Install <b>Python</b> (3.5+) and <b>pip</b>\n          </li>\n          <li>\n            {\" \"}\n            Create a{\" \"}\n            <a href=\"https://github.com/\">\n              <b>GitHub</b> account\n            </a>\n            , and install it on your machine;\n          </li>\n          <li>\n            {\" \"}\n            Create a{\" \"}\n            <a href=\"https://hub.docker.com/\">\n              <b>Docker Hub</b> account\n            </a>\n            ;\n          </li>\n          <li>\n            {\" \"}\n            Install the latest <b>Docker</b> (17.04.0+) if you want to test your\n            plugin's Docker image and containers on your machine. To install on\n            Ubuntu 18.04:\n            <br />\n            <pre>\n              apt-get remove docker docker-engine docker.io <br />\n              apt install docker.io <br />\n            </pre>\n            Otherwise, visit{\" \"}\n            <a href=\"https://docs.docker.com/install/\">\n              https://docs.docker.com/install/\n            </a>{\" \"}\n            for installation directions.\n          </li>\n          <br />\n\n          <li>\n            {\" \"}\n            Fork our wrapper template{\" \"}\n            <b>\n              <a href=\"https://github.com/aichung/pl-cnichallenge_stub\">\n                pl-cnichallenge_stub\n              </a>\n            </b>{\" \"}\n            repository to your GitHub.\n          </li>\n          <li>\n            {\" \"}\n            Log onto your Docker Hub account and create a new repository with\n            automated build:\n            <br />\n          </li>\n          <ol>\n            <li>\n              In 'Account Settings' -> 'Linked Accounts', connect your GitHub\n              account to your DockerHub account.\n            </li>\n            <li>\n              In your DockerHub home, click the <b>Create Repository+</b>{\" \"}\n              button. The website page will walk you through setting up the\n              automated build. When prompted for the GitHub repository that\n              you’d like to use for the automated build select the{\" \"}\n              <b>pl-cni_challenge</b>\n              repository that you just forked. Name the Docker repository{\" \"}\n              <i> cnichallenge_DockerRepo</i>\n              and make it Public.\n            </li>\n\n            <li>\n              <b>\n                ***It is extremely important that you tag your automatically\n                built docker image with an appropriate version number based on\n                your GitHub tags***.\n              </b>\n              <br />\n              &nbsp&nbsp&nbsp&nbsp Create a new build rule by clicking the{\" \"}\n              <b>BUILD RULES+</b> button. A good rule is **Source type:** \"Tag\",\n              **Source:** \"/^[0-9.]+$/\" and **Docker Tag:** \"version-sourceref\".\n            </li>\n            <li>\n              {\" \"}\n              Click <b>Create & Build</b> button to finish the setup and trigger\n              the automated build.\n            </li>\n            <br />\n          </ol>\n          <li>\n            After this build has completed, the <b>cnichallenge_stub</b> bare\n            bones example is now available as a Docker image to be pulled from\n            your Docker Hub. The link to it will be\n            <i>your_Docker_account name/cnichallenge_DockerRepo</i>.Use this to{\" \"}\n            <a href=\"submit\">evaluate</a>\n            your model on the test set.\n          </li>\n        </ol>\n        <h2 className=\"section-title\">Plugin Wrapper</h2>\n        <p>\n          We provide a wrapper for your code in a GitHub repo,{\" \"}\n          <a href=\"https://github.com/aichung/pl-cnichallenge_stub\">\n            pl-cnichallenge_stub\n          </a>\n          ,that containerizes your trained model. pl-cnichallenge_stub is an app\n          containing a bare bones example which you can edit to include your\n          code/package. Although the wrapper is coded in Python, programs in\n          other languages can be included.\n          <br />\n          <br />\n          See the pl-cnichallenge_stub README for details on how to execute and\n          populate the bare bones example to containerize your model that is\n          compatible for use on our evaluation portal.\n        </p>\n      </div>\n    </main>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}